// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// If user type is ANON, the PCD is a Semaphore Group PCD which signs the signal. We just check for membership.
// If user type is NONANON, the PCD is a Semaphore Signature PCD which signs the signal. We extract the commitment
//    from the verified PCD and then we check that it is part of a valid group.
enum UserType {
  ANON
  NONANON
}

enum BallotType {
  ADVISORYVOTE
  STRAWPOLL
}

model Ballot {
  ballotId String @id @default(uuid())
  ballotURL String @unique
	ballotTitle String
  ballotDescription String
  createdAt DateTime @default(now())
  expiry DateTime
  proof Json

  pollsterType UserType
  pollsterNullifier String @unique

  // ANON
  pollsterSemaphoreGroupUrl String?

  // NONANON
  pollsterName String?
  pollsterUuid String?
  pollsterCommitment String?

  voterSemaphoreGroupUrls String[]
  voterSemaphoreGroupRoots String[]
	polls Poll[]
	ballotType BallotType
}

model Poll {
  id String @id @default(uuid())
  createdAt DateTime @default(now())

  body String
  options String[]
  expiry DateTime

  ballot Ballot? @relation(fields: [ballotURL], references: [ballotURL])
  ballotURL String?

  votes Vote[]
}

// changed id here to be uuid, no reason it should be a signal hash.
model Vote {
  id String @id @default(uuid())
  poll Poll @relation(fields: [pollId], references: [id])
  pollId String
  voterType UserType
  voterNullifier String @unique

  // ANON
  voterSemaphoreGroupUrl String?

  // NONANON
  voterName String?
  voterUuid String?
  voterCommitment String?

  voteIdx Int
  proof Json
}